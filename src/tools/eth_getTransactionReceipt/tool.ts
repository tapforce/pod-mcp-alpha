import { DevnetConfig, DevnetConfigVerionZod } from '$config/devnet-config';
import { BaseTool, type ToolResult } from '$lib/base-tool';
import z from 'zod';

const schema = {
    version: DevnetConfigVerionZod.default('V1'),
    hash: z.string().describe('32-byte transaction hash'),
};

type Params = z.objectOutputType<typeof schema, z.ZodTypeAny>;
type Result = {
    jsonrpc: '2.0';
    id: number;
    result: {
        /** 32-byte hash of the transaction */
        transactionHash: string;
        /** Number of the block where this transaction was included, or null if pending */
        blockNumber: string | null;
        /** Hash of the block where this transaction was included, or null if pending */
        blockHash: string | null;
        /** Integer of the transaction's index position in the block, or null if pending */
        transactionIndex: string | null;
        /** 20-byte address of the sender */
        from: string;
        /** 20-byte address of the recipient, or null if contract creation */
        to: string | null;
        /** Value transferred in wei */
        value: string;
        /** Amount of gas used by this specific transaction alone */
        gasUsed: string;
        /** Cumulative gas used in the block up until and including this transaction */
        cumulativeGasUsed: string;
        /** Contract address created, if the transaction was a contract creation, otherwise null */
        contractAddress: string | null;
        /** Array of log objects generated by this transaction */
        logs: Array<{
            address: string;
            topics: string[];
            data: string;
            blockNumber: string;
            transactionHash: string;
            transactionIndex: string;
            blockHash: string;
            logIndex: string;
            removed?: boolean;
        }>;
        /** Bloom filter for light clients to quickly retrieve related logs */
        logsBloom: string;
        /** Status: either 1 (success) or 0 (failure); null for pre-Byzantium blocks */
        status: string | null;
        /** Additional pod-specific metadata, including attestations */
        pod_metadata: { [key: string]: unknown };
    } | null;
};

export class EthGetTransactionReceipt extends BaseTool<Params> {
    name = 'eth_getTransactionReceipt';
    description = 'Returns the receipt of a transaction by transaction hash.';
    schema = schema;

    async execute({ version, hash }: Params): Promise<ToolResult> {
        const body = JSON.stringify({
            jsonrpc: '2.0',
            method: 'eth_getTransactionReceipt',
            params: [hash],
            id: 1,
        });

        const que = fetch(DevnetConfig[version].EXPLORER_RPC_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body,
        })
            .then((i) => i.json())
            .catch((e) => e as Error);

        const result: Result | Error = await que;

        if (result instanceof Error) {
            throw result;
        }

        if ((result as any).error) {
            throw (result as any).error.message;
        }

        return {
            content: [
                {
                    type: 'text',
                    text: JSON.stringify(result.result),
                },
            ],
        };
    }
}
